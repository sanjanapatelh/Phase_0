# Protocol Design Revisions

## Initial Design
The initial protocol design used public-private key cryptography (asymmetric encryption):

1. **Client Initiates Registration Request:**
   * Client creates message: m := C, U, Pwd, REGISTER, Kc, ToD
   * Client generates signature: Sc := kc-sign(Hash(m))
   * **C → S:** C, Ks-Enc{m, Sc}

2. **Server Processes Registration Request:**
   * Server decrypts message: m, Sc := ks-Dec{Ks-Enc{m, Sc}}
   * Server verifies signature: Kc-verify(Hash(m), Sc)
   * Server validates client name: C == m.C
   * Server checks if user exists: if U ∉ BindingTable then continue else fail
   * Server generates random salt: n := RandomBytes(32)
   * Server computes password hash: p := Hash(Pwd · n, work_factor)
   * Server stores in BindingTable: BindingTable[U] := {ClientVerificationKey: Kc, PasswordHash: p, Salt: n, RecentLoginTime: ToD}

3. **Server Sends Registration Response:**
   * Server creates response: m' := S, m.U, REGISTER, Ks, status, ToD
   * Server generates signature: Ss := ks-sign(Hash(m'))
   * **S → C:** S, Ks-Enc{m', Ss}

4. **Client Verifies Registration Response:**
   * Client decrypts response: m', Ss := Ks-Dec{Ks-Enc{m', Ss}}
   * Client verifies signature: Ks-verify(Hash(m'), Ss)
   * Client validates server name: S == m'.S
   * Client confirms status and completes registration process

## Updated Design
The updated protocol uses session keys (symmetric encryption) due to message size limitations in the RSA implementation:

1. **Client Initiates Registration Request:**
   * Client creates message: m := C, U, Pwd, REGISTER, ToD, nonce
   * Client encrypts using session key: SessionKey-Enc{m}
   * **C → S:** C, SessionKey-Enc{m}

2. **Server Processes Registration Request:**
   * Server decrypts message: m := SessionKey-Dec{SessionKey-Enc{m}}
   * Server validates nonce (prevents replay attacks)
   * Server checks if user exists: if U ∉ BindingTable then continue else fail
   * Server generates random salt: n := RandomBytes(32)
   * Server computes password hash: p := Hash(Pwd · n, work_factor)
   * Server stores in BindingTable: BindingTable[U] := {PasswordHash: p, Salt: n, RecentLoginTime: ToD}

3. **Server Sends Registration Response:**
   * Server creates response: m' := S, m.U, REGISTER, status, ToD, nonce'
   * Server encrypts using session key: SessionKey-Enc{m'}
   * **S → C:** S, SessionKey-Enc{m'}

4. **Client Verifies Registration Response:**
   * Client decrypts response: m' := SessionKey-Dec{SessionKey-Enc{m'}}
   * Client validates nonce' (prevents replay attacks)
   * Client confirms status and completes registration process

## Key Changes
1. **Encryption Method:**
   * Changed from asymmetric (public-private key) to symmetric (session key) encryption
   * Addressed RSA message size limitation issues

2. **Authentication:**
   * Removed digital signatures (Sc, Ss)
   * Implemented nonce-based replay attack prevention

3. **Storage:**
   * Removed ClientVerificationKey from BindingTable (no longer using public keys)
   * Maintained password salt and hash mechanisms

4. **Security Properties:**
   * Both designs protect against replay attacks
   * Both designs authenticate the parties involved
   * Session key approach reduces computational overhead
   * Session key approach enables larger message sizes

5. **Implementation Simplification:**
   * Reduced cryptographic operations
   * Streamlined message processing
   * Maintained security properties with less complex protocol